ORGANIZATION_BLOCK OB 100
BEGIN


	// Connection 1 - as server to parent in binary tree
	CALL	SFB 102, DB 102 (
		ID				:= 1,
		DB_PARAM		:= 20,
		RECV_TIME		:= T#5S,
		CONN_TIME		:= T#5S,
		ENQ_ENR			:= TRUE,
		DISCONNECT		:= FALSE,
		REG_KEY			:= DB10.REG_KEY,
		LICENSED		:= DB10.LICENSED_1,
		BUSY			:= DB10.BUSY_1,
		CONN_ESTABLISHED := DB10.CONN_ESTABLISHED_1,
		DONE_NDR	 	:= DB10.DONE_NDR_1,
		ERROR		 	:= DB10.ERROR_1,
		STATUS_MODBUS	:= DB10.STATUS_MODBUS_1,
		STATUS_CONN	 	:= DB10.STATUS_CONN_1,
		UNIT		 	:= DB10.Unit_1,
		DATA_TYPE	 	:= DB10.Data_type_1,
		START_ADDRESS	:= DB10.Start_Address_1,
		LENGTH		 	:= DB10.Length_1,
		TI		 		:= DB10.TI_1,
		WRITE_READ	 	:= DB10.Write_Read_1,
		STATUS_FUNC	 	:= DB10.STATUS_FUNC,
		IDENT_CODE	 	:= DB10.IDENT_CODE,	

	
	)


	// Connection 2 - as client to left child in binary tree
	CALL	SFB 102, DB 102 (
		ID				 := 2,
		DB_PARAM		 := 21,
		RECV_TIME		 := T#5S,
		CONN_TIME		 := T#5S,
		ENQ_ENR			 := TRUE,
		DISCONNECT		 := FALSE,
		UNIT			 := DB10.Unit_2,
		DATA_TYPE		 := DB10.Data_type_2,
		START_ADDRESS	 := DB10.Start_Address_2,
		LENGTH			 := DB10.Length_2,
		TI		 		 := DB10.TI_2,
		WRITE_READ		 := DB10.Write_Read_2,
		LICENSED		 := DB10.LICENSED_2,
		BUSY			 := DB10.BUSY_2,
		CONN_ESTABLISHED := DB10.CONN_ESTABLISHED_2,
		DONE_NDR		 := DB10.DONE_NDR_2,
		ERROR			 := DB10.ERROR_2,
		STATUS_MODBUS	 := DB10.STATUS_MODBUS_2,
		STATUS_CONN		 := DB10.STATUS_CONN_2,
	
	)


	// Connection 3 - as client to right child in binary tree
	CALL	SFB 102, DB 102 (
		ID				 := 3,
		DB_PARAM		 := 22,
		RECV_TIME		 := T#5S,
		CONN_TIME		 := T#5S,
		ENQ_ENR			 := TRUE,
		DISCONNECT		 := FALSE,
		UNIT			 := DB10.Unit_3,
		DATA_TYPE		 := DB10.Data_type_3,
		START_ADDRESS	 := DB10.Start_Address_3,
		LENGTH			 := DB10.Length_3,
		TI		 		 := DB10.TI_3,
		WRITE_READ		 := DB10.Write_Read_3,
		LICENSED		 := DB10.LICENSED_3,
		BUSY			 := DB10.BUSY_3,
		CONN_ESTABLISHED := DB10.CONN_ESTABLISHED_3,
		DONE_NDR		 := DB10.DONE_NDR_3,
		ERROR			 := DB10.ERROR_3,
		STATUS_MODBUS	 := DB10.STATUS_MODBUS_3,
		STATUS_CONN		 := DB10.STATUS_CONN_3,
	
	)


	

	// DB 4, ModBus Register 1,2,3,4 used in connection 1 
	// Initialize Reg 1,2,3,4
	
	OPN DB 4
	L 	W#16#1234
	T	DBW 0
	L   W#16#6789
	T 	DBW 2
	
	// DB 5, ModBus Register 1,2,3,4 used in connection 2
	// Initialize Reg 1,2,3,4
	
	OPN DB 5
	L 	W#16#0000
	T	DBW 0
	L   W#16#0000
	T 	DBW 1

	// DB 5, ModBus Register 1,2,3,4 used in connection 3 
	// Initialize Reg 1,2,3,4
	
	OPN DB 6
	L 	W#16#0000
	T	DBW 0
	L   W#16#0000
	T 	DBW 1


END_ORGANIZATION_BLOCK

ORGANIZATION_BLOCK OB 1
BEGIN
	

	
	

	OPN DB 5 // Update NROUTED_LEFT & NTRANSIT_LEFTSUBTREE Variables form ModBus Registers in DB 5
	L DBW0
	T DB10.NROUTED_LEFT

	OPN DB 5 
	L DBW2
	T DB10.NTRANSIT_LEFTSUBTREE

	
	OPN DB 6 // Update NROUTED_RIGHT & NTRANSIT_RIGHTSUBTREE Variables form ModBus Registers in DB 6
	L DBW0
	T DB10.NROUTED_RIGHT

	OPN DB 6 
	L DBW2
	T DB10.NTRANSIT_RIGHTSUBTREE


	// Update NTRANSIT_CHILD Variable
	L DB10.NROUTED_LEFT
	L DB10.NROUTED
	-I
	T DB10.TEMP

	L DB10.NROUTED_RIGHT
	L DB10.TEMP
	-I
	T DB10.NTRANSIT_CHILD
	L W#16#0000
	T DB10.TEMP

	// update NTRANSIT_SUBTREE Variable
	L DB10.NTRANSIT_LEFTSUBTREE
	L DB10.NTRANSIT_CHILD
	+I
	T DB10.TEMP
	L DB10.TEMP
	L DB10.NTRANSIT_RIGHTSUBTREE
	+I
	T DB10.NTRANSIT_SUBTREE
	L W#16#0000
	T DB10.TEMP


	// update NROUTED and NTRANSIT_SUBTREE Values to ModBus Registers in DB 4 (comm with parent)
	L DB10.NROUTED
	OPN DB 4	
	T DBW 0

	L DB10.NTRANSIT_SUBTREE
	OPN DB 4
	T DBW 2

	// set outputs to 00
	CLR
	= Q 0.0
	= Q 0.1


	CLR
	// All of this stuff commented out
	//L DB10.NROUTED
	//L DB10.Max_Times
	//==I
	//JC _6 //SPB 	_6 // ** Modified here should be JC _6


	// Connection 1 - as server to parent in binary tree. should always run
	CALL	SFB 102, DB 102 (
		ID				:= 1,
		DB_PARAM		:= 20,
		RECV_TIME		:= T#5S,
		CONN_TIME		:= T#5S,
		ENQ_ENR			:= TRUE,
		DISCONNECT		:= FALSE,
		REG_KEY			:= DB10.REG_KEY,
		LICENSED		:= DB10.LICENSED_1,
		BUSY			:= DB10.BUSY_1,
		CONN_ESTABLISHED := DB10.CONN_ESTABLISHED_1,
		DONE_NDR	 	:= DB10.DONE_NDR_1,
		ERROR		 	:= DB10.ERROR_1,
		STATUS_MODBUS	:= DB10.STATUS_MODBUS_1,
		STATUS_CONN	 	:= DB10.STATUS_CONN_1,
		UNIT		 	:= DB10.Unit_1,
		DATA_TYPE	 	:= DB10.Data_type_1,
		START_ADDRESS	:= DB10.Start_Address_1,
		LENGTH		 	:= DB10.Length_1,
		TI		 		:= DB10.TI_1,
		WRITE_READ	 	:= DB10.Write_Read_1,
		STATUS_FUNC	 	:= DB10.STATUS_FUNC,
		IDENT_CODE	 	:= DB10.IDENT_CODE,	

	
	)

	


	SET
	A 	I 0.1
	JCN  _1		// If input 1.0  is false, jump to _Check_Conn2
	L W#16#1
	T DB10.CONNECTION2_STARTED	// Else, set Conn2_Started & Conn3_Started
	L W#16#1
	T DB10.CONNECTION3_STARTED


	//************  SEND MODBUS QUERY MESSAGE OVER CONNECTION 2 & 3 ***************
	// Get Nrouted and Ntransit_Subtree from each child nodes
	
_1:		L W#16#1
		L DB10.CONNECTION2_STARTED
		==I 				// IF connection 2 has been started, continue
		JCN _2 //SPA _2	// Else, Check Conn 3
	
	// Connection 2 - as client to left child in binary tree
	CALL	SFB 102, DB 102 (
		ID				 := 2,
		DB_PARAM		 := 21,
		RECV_TIME		 := T#5S,
		CONN_TIME		 := T#5S,
		ENQ_ENR			 := TRUE,
		DISCONNECT		 := FALSE,
		UNIT			 := DB10.Unit_2,
		DATA_TYPE		 := DB10.Data_type_2,
		START_ADDRESS	 := DB10.Start_Address_2,
		LENGTH			 := DB10.Length_2,
		TI		 		 := DB10.TI_2,
		WRITE_READ		 := DB10.Write_Read_2,
		LICENSED		 := DB10.LICENSED_2,
		BUSY			 := DB10.BUSY_2,
		CONN_ESTABLISHED := DB10.CONN_ESTABLISHED_2,
		DONE_NDR		 := DB10.DONE_NDR_2,
		ERROR			 := DB10.ERROR_2,
		STATUS_MODBUS	 := DB10.STATUS_MODBUS_2,
		STATUS_CONN		 := DB10.STATUS_CONN_2,
	
	)

	SET
	A DB10.DONE_NDR_2
	//SPA _2			// If Connection 2 is not done, check Conn 3
	JCN _2
	L W#16#0000
	T DB10.CONNECTION2_STARTED	// Else, reset Conn2_Started Variable


_2: 	L W#16#1
		L DB10.CONNECTION3_STARTED
		==I 				// IF connection 2 has been started, continue
		JCN _3 //SPA _3	// Else, Check Input 2
	


	// Connection 3 - as client to right child in binary tree
	CALL	SFB 102, DB 102 (
		ID				 := 3,
		DB_PARAM		 := 22,
		RECV_TIME		 := T#5S,
		CONN_TIME		 := T#5S,
		ENQ_ENR			 := TRUE,
		DISCONNECT		 := FALSE,
		UNIT			 := DB10.Unit_3,
		DATA_TYPE		 := DB10.Data_type_3,
		START_ADDRESS	 := DB10.Start_Address_3,
		LENGTH			 := DB10.Length_3,
		TI		 		 := DB10.TI_3,
		WRITE_READ		 := DB10.Write_Read_3,
		LICENSED		 := DB10.LICENSED_3,
		BUSY			 := DB10.BUSY_3,
		CONN_ESTABLISHED := DB10.CONN_ESTABLISHED_3,
		DONE_NDR		 := DB10.DONE_NDR_3,
		ERROR			 := DB10.ERROR_3,
		STATUS_MODBUS	 := DB10.STATUS_MODBUS_3,
		STATUS_CONN		 := DB10.STATUS_CONN_3,
	
	)

	SET
	A DB10.DONE_NDR_3
	JCN _3  //SPA _3			// If Connection 3 is not done, check Input2
	L W#16#0000
	T DB10.CONNECTION3_STARTED	// Else, reset Conn3_Started Variable

	



_3:		SET
		A 	I 0.0
		JCN	 _4		// If input 1.1 is false, jump to _Check_Input3

	// New job arrival. Increment NRouted Variable

	L DB10.NROUTED
	INC 1
	T DB10.NROUTED

	// If NTRANSIT_LEFTSUBTREE < NTRANSIT_RIGHTSUBTREE -> route to left child. Set output bit 0, else,
	// set output bit 1

	L DB10.NTRANSIT_LEFTSUBTREE
	L DB10.NTRANSIT_RIGHTSUBTREE
	<I
	JCN _35
	// if NTRANSIT_LEFTSUBTREE < NTRANSIT_RIGHTSUBTREE
	SET
	L 1
	//= Q 0.0		// set output bit 0
	T QB0
	JU _4

_35:	SET
		L 2
		T QB0
		//= Q 0.1		// set output bit 1


_4:		SET
	A 	I 0.2
	JCN	 _5	// If input 0.2 is false, run conn1, else decrement NTRANSIT_CHILD
	L DB10.DECREMENT_QTY
	L DB10.NTRANSIT_CHILD
	<I
	JC _45
	-I
	T DB10.NTRANSIT_CHILD
	JU _5


_45:	L W#16#0
		T DB10.NTRANSIT_CHILD

	

_5:	    JU _7

_6:	CALL SFC 46 // STOP CPU
_7:	NOP	0
	

	

END_ORGANIZATION_BLOCK

DATA_BLOCK DB 10
STRUCT

// Connection 1
Unit_1			: WORD;
Data_type_1		: WORD;
Start_Address_1	: WORD;
TI_1			: WORD;
Length_1		: WORD;
Write_Read_1	: BOOL;
LICENSED_1		: BOOL;
BUSY_1			: BOOL;
CONN_ESTABLISHED_1 : BOOL;
DONE_NDR_1	 	: BOOL;
ERROR_1		 	: BOOL;
STATUS_MODBUS_1	: WORD;
STATUS_CONN_1 	: WORD;



// Connection 2
Unit_2			: WORD;
Data_type_2		: WORD;
Start_Address_2	: WORD;
TI_2			: WORD;
Length_2		: WORD;
Write_Read_2	: BOOL;
LICENSED_2		: BOOL;
BUSY_2			: BOOL;
CONN_ESTABLISHED_2 : BOOL;
DONE_NDR_2	 	: BOOL;
ERROR_2		 	: BOOL;
STATUS_MODBUS_2	: WORD;
STATUS_CONN_2 	: WORD;


// Connection 3
Unit_3			: WORD;
Data_type_3		: WORD;
Start_Address_3	: WORD;
TI_3			: WORD;
Length_3		: WORD;
Write_Read_3	: BOOL;
LICENSED_3		: BOOL;
BUSY_3			: BOOL;
CONN_ESTABLISHED_3 : BOOL;
DONE_NDR_3	 	: BOOL;
ERROR_3		 	: BOOL;
STATUS_MODBUS_3	: WORD;
STATUS_CONN_3 	: WORD;


STATUS_FUNC		: STRING;	// 256 bytes
IDENT_CODE		: STRING; 	// 256 bytes
REG_KEY			: STRING := '1234';

// total no of jobs routed by this node so far
// Incremented with each new arriving job
NROUTED			: WORD	:= W#16#0000;	

// no of jobs routed by left child. updated periodically by msg exchange
NROUTED_LEFT    : WORD  := W#16#0000;

// no of jobs routed by right child. updated periodically by msg exchange
NROUTED_RIGHT   : WORD  := W#16#0000;

// no of jobs in transit on the branches to child nodes
// Ntransit_Child = NRouted - NRouted_left - NRouted_right
NTRANSIT_CHILD	: WORD	:= W#16#0000;	

// no of jobs in transit in entire left subtree. updated periodically by msg exchange with left child
NTRANSIT_LEFTSUBTREE  : WORD  := W#16#000;

// no of jobs in transit in entire right subtree. Updated periodically by msg exchange with right child
NTRANSIT_RIGHTSUBTREE : WORD  := W#16#000;

// no of jobs in transit in the entire sub tree
// Ntransit_subtree = Ntransit_child + Ntransit_Left_Subtree + Ntransit_Right_Subtree
NTRANSIT_SUBTREE : WORD := W#16#0000;


// Each node sends: (NRouted, NTransit_Subtree) to its parent node.						

TEMP			 : WORD	:= W#16#0000;
CONNECTION1_STARTED : WORD := W#16#0000;
CONNECTION2_STARTED : WORD := W#16#0000;
CONNECTION3_STARTED : WORD := W#16#0000;
Index				: WORD := W#16#0;
Max_Times			: WORD := W#16#05;
DECREMENT_QTY		: WORD := W#16#0A;


END_STRUCT


BEGIN

// Connection 1 params
Unit_1	 		:= W#16#1;		// Dummy variable
Data_type_1		:= W#16#3;		// Register
Start_Address_1	:= W#16#1;	
TI_1			:= W#16#10;		// Transaction Identifier
Length_1		:= W#16#2;		
Write_Read_1	:= FALSE;

// Connection 2 params
Unit_2	 		:= W#16#1;		// Dummy variable
Data_type_2		:= W#16#3;		// Register
Start_Address_2	:= W#16#2;	
TI_2			:= W#16#10;		// Transaction Identifier
Length_2		:= W#16#2;		
Write_Read_2	:= FALSE;

// Connection 3 params
Unit_3	 		:= W#16#1;		// Dummy variable
Data_type_3		:= W#16#3;		// Register
Start_Address_3	:= W#16#2;	
TI_3			:= W#16#10;		// Transaction Identifier
Length_3		:= W#16#2;		
Write_Read_3	:= FALSE;


END_DATA_BLOCK

DATA_BLOCK DB 102
	SFB 102
BEGIN
END_DATA_BLOCK
